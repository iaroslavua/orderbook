{"version":3,"sources":["components/OrderBook.js","components/Binance.js","components/Dialog.js","App.js","serviceWorker.js","index.js"],"names":["OrderBook","props","state","minLotSize","Number","Fragment","size","value","this","onChange","e","setState","target","className","bids","filter","bid","slice","map","i","key","toPrecision","asks","ask","React","Component","Binance","ticker","onTickerChange","bind","onKeyDown","subscribeForOrderBook","onEventMessageReceived","evtSource","close","EventSource","onmessage","event","data","JSON","parse","keyCode","style","width","onClick","onClose","id","Dialog","useState","setTicker","exchange","setExchange","onDismiss","stopPropagation","type","onSubmit","isDialog","exchanges","onDismissDialog","onSubmitExchange","onCloseExchange","prevState","length","ex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.564a3179.chunk.js","sourcesContent":["import React from 'react';\n\nclass OrderBook extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            minLotSize: Number(50)\n        };\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div>\n                    Minimum lot size: <input size={5} value={this.state.minLotSize} onChange={(e) => (this.setState({minLotSize: e.target.value}))} />\n                </div>\n                <div className=\"order-book\">\n                    <table>\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>Price</th>\n                            <th>Amount</th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                          {\n                              this.props.bids\n                                .filter(bid => Number(bid[1]) >= this.state.minLotSize)\n                                .slice(0, 30)\n                                .map((bid, i) => (<tr key={i}><td>{i}</td><td>{Number(bid[0]).toPrecision(6)}</td><td>{Number(bid[1]).toPrecision(3)}</td></tr>))\n                          }\n                      </tbody>\n                    </table>\n\n                    <table>\n                        <thead>\n                          <tr>\n                            <th>#</th>\n                            <th>Price</th>\n                            <th>Amount</th>\n                          </tr>\n                      </thead>\n                      <tbody>\n                          {\n                              this.props.asks\n                                .filter(ask => Number(ask[1]) >= this.state.minLotSize)\n                                .slice(0, 30)\n                                .map((ask, i) => (<tr key={i}><td>{i}</td><td>{Number(ask[0]).toPrecision(6)}</td><td>{Number(ask[1]).toPrecision(3)}</td></tr>))\n                          }\n                      </tbody>\n                    </table>\n\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default OrderBook;\n","import React from 'react';\nimport OrderBook from './OrderBook.js';\n\nclass Binance extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ticker: props.ticker ? props.ticker : \"BTCUSDT\",\n            bids: [],\n            asks: []\n        };\n\n        this.onTickerChange = this.onTickerChange.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.subscribeForOrderBook = this.subscribeForOrderBook.bind(this);\n        this.onEventMessageReceived = this.onEventMessageReceived.bind(this);\n    }\n\n    subscribeForOrderBook() {\n        if (this.evtSource) {\n            this.evtSource.close();\n        }\n        this.evtSource = new EventSource(`/order-book/binance/${this.state.ticker}`);\n        this.evtSource.onmessage = this.onEventMessageReceived;\n    }\n\n    onEventMessageReceived(event) {\n        let data = JSON.parse(event.data);\n        this.setState({bids: data.bids, asks: data.asks});\n    }\n\n    componentDidMount() {\n        this.subscribeForOrderBook();\n    }\n\n    componentWillUnmount() {\n        this.evtSource.close();\n    }\n\n    onTickerChange(e) {\n        this.setState({ticker: e.target.value})\n    }\n\n    onKeyDown(e) {\n        if (e.keyCode === 13) {\n            this.subscribeForOrderBook();\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"exchange\">\n                <div style={{width: '100%', 'text-align': 'end'}}><span className=\"button-close\" onClick={() => this.props.onClose(this.props.id)}>+</span></div>\n                <div className=\"exchange-title\">Binance</div>\n                <input className=\"ticker\" size={20} value={this.state.ticker} onChange={this.onTickerChange} onKeyDown={this.onKeyDown} />\n                <OrderBook bids={this.state.bids} asks={this.state.asks} />\n            </div>\n        );\n    }\n}\n\nexport default Binance;\n","import React from 'react';\n\nexport default function Dialog(props) {\n    const [ticker, setTicker] = React.useState(\"BTCUSDT\");\n    const [exchange, setExchange] = React.useState(\"binance\");\n\n    return(\n        <div className=\"dialog-background\" onClick={props.onDismiss}>\n            <div className=\"dialog\" onClick={e => e.stopPropagation()}>\n                <input value={ticker} onChange={(e) => setTicker(e.target.value)} />\n                <form>\n                    <label>\n                        Exchange:\n                        <select value={exchange} onChange={(e) => setExchange(e.target.value)}>\n                            <option value=\"binance\">Binance</option>\n                        </select>\n                    </label>\n                </form>\n                <input type=\"button\" value=\"Ok\" onClick={() => props.onSubmit(exchange, ticker)} />\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport Binance from './components/Binance.js';\nimport Dialog from './components/Dialog.js';\nimport './App.css';\n\nclass OrderBook extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDialog: false,\n            exchanges: [\n                { id: 0, exchange: \"binance\", ticker: \"BTCUSDT\" },\n            ]\n        }\n\n        this.onDismissDialog = this.onDismissDialog.bind(this);\n        this.onSubmitExchange = this.onSubmitExchange.bind(this);\n        this.onCloseExchange = this.onCloseExchange.bind(this);\n    }\n\n    onDismissDialog() {\n        this.setState({isDialog: false});\n    }\n\n    onSubmitExchange(exchange, ticker) {\n        this.setState(prevState => {\n            return {\n                isDialog: false,\n                exchanges: [...prevState.exchanges, {id: prevState.exchanges.length, exchange: exchange, ticker: ticker}]\n            }\n        });\n    }\n\n    onCloseExchange(id) {\n        this.setState(prevState => {\n            return {exchanges: prevState.exchanges.filter(ex => ex.id !== id)};\n        });\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {\n                    this.state.isDialog && <Dialog onDismiss={this.onDismissDialog} onSubmit={this.onSubmitExchange} />\n                }\n                {\n                    this.state.exchanges.map((exchange, i) => {\n                        if (exchange.exchange === \"binance\") {\n                            return <Binance key={exchange.id} id={exchange.id} ticker={exchange.ticker} onClose={this.onCloseExchange} />\n                        } else {\n                            return <Binance key={exchange.id} id={exchange.id} ticker={exchange.ticker} onClose={this.onCloseExchange} />\n                        }\n                    })\n                }\n                <div id=\"button-add-exchange\" onClick={() => this.setState({isDialog: true})}>+</div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default OrderBook;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport OrderBook from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <OrderBook />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}